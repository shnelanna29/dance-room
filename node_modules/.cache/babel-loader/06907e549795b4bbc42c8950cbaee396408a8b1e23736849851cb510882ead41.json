{"ast":null,"code":"// src/hydration.ts\nimport { tryResolveSync } from \"./thenable.js\";\nimport { noop } from \"./utils.js\";\nfunction defaultTransformerFn(data) {\n  return data;\n}\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\nfunction dehydrateQuery(query, serializeData, shouldRedactErrors) {\n  const promise = query.promise?.then(serializeData).catch(error => {\n    if (!shouldRedactErrors(error)) {\n      return Promise.reject(error);\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n    }\n    return Promise.reject(new Error(\"redacted\"));\n  });\n  promise?.catch(noop);\n  return {\n    dehydratedAt: Date.now(),\n    state: {\n      ...query.state,\n      ...(query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      })\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === \"pending\" && {\n      promise\n    }),\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction defaultShouldRedactErrors(_) {\n  return true;\n}\nfunction dehydrate(client, options = {}) {\n  const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n  const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(({\n    state,\n    ...mutationOptions\n  }) => {\n    mutationCache.build(client, {\n      ...client.getDefaultOptions().hydrate?.mutations,\n      ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(({\n    queryKey,\n    state,\n    queryHash,\n    meta,\n    promise,\n    dehydratedAt\n  }) => {\n    const syncData = promise ? tryResolveSync(promise) : void 0;\n    const rawData = state.data === void 0 ? syncData?.data : state.data;\n    const data = rawData === void 0 ? rawData : deserializeData(rawData);\n    let query = queryCache.get(queryHash);\n    const existingQueryIsPending = query?.state.status === \"pending\";\n    const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n    if (query) {\n      const hasNewerSyncData = syncData &&\n      // We only need this undefined check to handle older dehydration\n      // payloads that might not have dehydratedAt\n      dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n      if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n        const {\n          fetchStatus: _ignored,\n          ...serializedState\n        } = state;\n        query.setState({\n          ...serializedState,\n          data\n        });\n      }\n    } else {\n      query = queryCache.build(client, {\n        ...client.getDefaultOptions().hydrate?.queries,\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        data,\n        fetchStatus: \"idle\",\n        status: data !== void 0 ? \"success\" : state.status\n      });\n    }\n    if (promise && !existingQueryIsPending && !existingQueryIsFetching && (\n    // Only hydrate if dehydration is newer than any existing data,\n    // this is always true for new queries\n    dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n      query.fetch(void 0, {\n        // RSC transformed promises are not thenable\n        initialPromise: Promise.resolve(promise).then(deserializeData)\n      }).catch(noop);\n    }\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["tryResolveSync","noop","defaultTransformerFn","data","dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","shouldRedactErrors","promise","then","catch","error","Promise","reject","process","env","NODE_ENV","console","queryHash","Error","dehydratedAt","Date","now","queryKey","status","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","defaultShouldRedactErrors","_","dehydrate","client","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","deserializeData","defaultOptions","forEach","mutationOptions","build","syncData","rawData","get","existingQueryIsPending","existingQueryIsFetching","fetchStatus","hasNewerSyncData","dataUpdatedAt","_ignored","serializedState","setState","fetch","initialPromise","resolve"],"sources":["C:\\Users\\Admin\\Desktop\\Диск D\\колледж\\Бутов\\DR\\node_modules\\@tanstack\\query-core\\src\\hydration.ts"],"sourcesContent":["import { tryResolveSync } from './thenable'\nimport { noop } from './utils'\nimport type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n  // This is only optional because older versions of Query might have dehydrated\n  // without it which we need to handle for backwards compatibility.\n  // This should be changed to required in the future.\n  dehydratedAt?: number\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  const promise = query.promise?.then(serializeData).catch((error) => {\n    if (!shouldRedactErrors(error)) {\n      // Reject original error if it should not be redacted\n      return Promise.reject(error)\n    }\n    // If not in production, log original error before rejecting redacted error\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n      )\n    }\n    return Promise.reject(new Error('redacted'))\n  })\n\n  // Avoid unhandled promise rejections\n  // We need the promise we dehydrate to reject to get the correct result into\n  // the query cache, but we also want to avoid unhandled promise rejections\n  // in whatever environment the prefetches are happening in.\n  promise?.catch(noop)\n\n  return {\n    dehydratedAt: Date.now(),\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise,\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(\n    ({ queryKey, state, queryHash, meta, promise, dehydratedAt }) => {\n      const syncData = promise ? tryResolveSync(promise) : undefined\n      const rawData = state.data === undefined ? syncData?.data : state.data\n      const data = rawData === undefined ? rawData : deserializeData(rawData)\n\n      let query = queryCache.get(queryHash)\n      const existingQueryIsPending = query?.state.status === 'pending'\n      const existingQueryIsFetching = query?.state.fetchStatus === 'fetching'\n\n      // Do not hydrate if an existing query exists with newer data\n      if (query) {\n        const hasNewerSyncData =\n          syncData &&\n          // We only need this undefined check to handle older dehydration\n          // payloads that might not have dehydratedAt\n          dehydratedAt !== undefined &&\n          dehydratedAt > query.state.dataUpdatedAt\n        if (\n          state.dataUpdatedAt > query.state.dataUpdatedAt ||\n          hasNewerSyncData\n        ) {\n          // omit fetchStatus from dehydrated state\n          // so that query stays in its current fetchStatus\n          const { fetchStatus: _ignored, ...serializedState } = state\n          query.setState({\n            ...serializedState,\n            data,\n          })\n        }\n      } else {\n        // Restore query\n        query = queryCache.build(\n          client,\n          {\n            ...client.getDefaultOptions().hydrate?.queries,\n            ...options?.defaultOptions?.queries,\n            queryKey,\n            queryHash,\n            meta,\n          },\n          // Reset fetch status to idle to avoid\n          // query being stuck in fetching state upon hydration\n          {\n            ...state,\n            data,\n            fetchStatus: 'idle',\n            status: data !== undefined ? 'success' : state.status,\n          },\n        )\n      }\n\n      if (\n        promise &&\n        !existingQueryIsPending &&\n        !existingQueryIsFetching &&\n        // Only hydrate if dehydration is newer than any existing data,\n        // this is always true for new queries\n        (dehydratedAt === undefined || dehydratedAt > query.state.dataUpdatedAt)\n      ) {\n        // This doesn't actually fetch - it just creates a retryer\n        // which will re-use the passed `initialPromise`\n        // Note that we need to call these even when data was synchronously\n        // available, as we still need to set up the retryer\n        query\n          .fetch(undefined, {\n            // RSC transformed promises are not thenable\n            initialPromise: Promise.resolve(promise).then(deserializeData),\n          })\n          // Avoid unhandled promise rejections\n          .catch(noop)\n      }\n    },\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = class extends Removable {\n  #client;\n  #observers;\n  #mutationCache;\n  #retryer;\n  constructor(config) {\n    super();\n    this.#client = config.client;\n    this.mutationId = config.mutationId;\n    this.#mutationCache = config.mutationCache;\n    this.#observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = options;\n    this.updateGcTime(this.options.gcTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.#observers = this.#observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.#mutationCache.notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        this.#mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    return this.#retryer?.continue() ??\n    // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n  async execute(variables) {\n    const onContinue = () => {\n      this.#dispatch({\n        type: \"continue\"\n      });\n    };\n    const mutationFnContext = {\n      client: this.#client,\n      meta: this.options.meta,\n      mutationKey: this.options.mutationKey\n    };\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error(\"No mutationFn found\"));\n        }\n        return this.options.mutationFn(variables, mutationFnContext);\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.#dispatch({\n          type: \"pause\"\n        });\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this)\n    });\n    const restored = this.state.status === \"pending\";\n    const isPaused = !this.#retryer.canStart();\n    try {\n      if (restored) {\n        onContinue();\n      } else {\n        this.#dispatch({\n          type: \"pending\",\n          variables,\n          isPaused\n        });\n        await this.#mutationCache.config.onMutate?.(variables, this, mutationFnContext);\n        const context = await this.options.onMutate?.(variables, mutationFnContext);\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: \"pending\",\n            context,\n            variables,\n            isPaused\n          });\n        }\n      }\n      const data = await this.#retryer.start();\n      await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this, mutationFnContext);\n      await this.options.onSuccess?.(data, variables, this.state.context, mutationFnContext);\n      await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this, mutationFnContext);\n      await this.options.onSettled?.(data, null, variables, this.state.context, mutationFnContext);\n      this.#dispatch({\n        type: \"success\",\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        await this.#mutationCache.config.onError?.(error, variables, this.state.context, this, mutationFnContext);\n        await this.options.onError?.(error, variables, this.state.context, mutationFnContext);\n        await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this, mutationFnContext);\n        await this.options.onSettled?.(void 0, error, variables, this.state.context, mutationFnContext);\n        throw error;\n      } finally {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n    } finally {\n      this.#mutationCache.runNext(this);\n    }\n  }\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            isPaused: true\n          };\n        case \"continue\":\n          return {\n            ...state,\n            isPaused: false\n          };\n        case \"pending\":\n          return {\n            ...state,\n            context: action.context,\n            data: void 0,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: \"pending\",\n            variables: action.variables,\n            submittedAt: Date.now()\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: \"success\",\n            isPaused: false\n          };\n        case \"error\":\n          return {\n            ...state,\n            data: void 0,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: \"error\"\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.#mutationCache.notify({\n        mutation: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n};\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"names":["notifyManager","Removable","createRetryer","Mutation","client","observers","mutationCache","retryer","constructor","config","mutationId","state","getDefaultState","setOptions","options","scheduleGc","updateGcTime","gcTime","meta","addObserver","observer","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","execute","variables","onContinue","dispatch","mutationFnContext","mutationKey","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","onPause","retry","retryDelay","networkMode","canRun","restored","isPaused","canStart","onMutate","context","data","start","onSuccess","onSettled","onError","runNext","#dispatch","action","reducer","failureReason","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["C:\\Users\\Admin\\Desktop\\Диск D\\колледж\\Бутов\\DR\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationFunctionContext,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\nimport type { QueryClient } from './queryClient'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TOnMutateResult> {\n  client: QueryClient\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TOnMutateResult>\n  state?: MutationState<TData, TError, TVariables, TOnMutateResult>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TOnMutateResult = unknown,\n> {\n  context: TOnMutateResult | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TOnMutateResult> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TOnMutateResult\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TOnMutateResult> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TOnMutateResult>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TOnMutateResult = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TOnMutateResult>\n  options!: MutationOptions<TData, TError, TVariables, TOnMutateResult>\n  readonly mutationId: number\n\n  #client: QueryClient\n  #observers: Array<\n    MutationObserver<TData, TError, TVariables, TOnMutateResult>\n  >\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(\n    config: MutationConfig<TData, TError, TVariables, TOnMutateResult>,\n  ) {\n    super()\n\n    this.#client = config.client\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TOnMutateResult>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    const mutationFnContext = {\n      client: this.#client,\n      meta: this.options.meta,\n      mutationKey: this.options.mutationKey,\n    } satisfies MutationFunctionContext\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n\n        return this.options.mutationFn(variables, mutationFnContext)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n          mutationFnContext,\n        )\n        const context = await this.options.onMutate?.(\n          variables,\n          mutationFnContext,\n        )\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n        mutationFnContext,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        variables,\n        this.state.context!,\n        mutationFnContext,\n      )\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n        mutationFnContext,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        variables,\n        this.state.context,\n        mutationFnContext,\n      )\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n          mutationFnContext,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n          mutationFnContext,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n          mutationFnContext,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n          mutationFnContext,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TOnMutateResult>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TOnMutateResult>,\n    ): MutationState<TData, TError, TVariables, TOnMutateResult> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TOnMutateResult,\n>(): MutationState<TData, TError, TVariables, TOnMutateResult> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n// Создаем экземпляр axios с базовыми настройками\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Обработчик ошибок\nconst handleError = error => {\n  if (error.response) {\n    // Сервер ответил с ошибкой\n    console.error('Ошибка сервера:', error.response.status, error.response.data);\n    throw new Error(`Ошибка ${error.response.status}: ${error.response.statusText}`);\n  } else if (error.request) {\n    // Запрос был отправлен, но ответа не получено\n    console.error('Ошибка сети: нет ответа от сервера');\n    throw new Error('Ошибка сети: проверьте подключение к интернету');\n  } else {\n    // Ошибка при настройке запроса\n    console.error('Ошибка запроса:', error.message);\n    throw new Error('Ошибка при отправке запроса');\n  }\n};\n\n// GET - Получение всех отзывов\nexport const getReviews = async () => {\n  try {\n    const response = await apiClient.get('/comments?_limit=10');\n    // Трансформируем данные JSONPlaceholder в формат наших отзывов\n    return response.data.map(comment => ({\n      id: comment.id,\n      name: comment.name,\n      text: comment.body,\n      rating: Math.floor(Math.random() * 2) + 4,\n      // Случайная оценка 4 или 5\n      email: comment.email\n    }));\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// GET - Получение одного отзыва по ID\nexport const getReviewById = async id => {\n  try {\n    const response = await apiClient.get(`/comments/${id}`);\n    return {\n      id: response.data.id,\n      name: response.data.name,\n      text: response.data.body,\n      rating: 5,\n      email: response.data.email\n    };\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// POST - Добавление нового отзыва\nexport const createReview = async reviewData => {\n  try {\n    const response = await apiClient.post('/comments', {\n      name: reviewData.name,\n      body: reviewData.text,\n      email: reviewData.email || 'user@example.com',\n      postId: 1\n    });\n    return {\n      id: response.data.id,\n      name: reviewData.name,\n      text: reviewData.text,\n      rating: reviewData.rating,\n      email: reviewData.email\n    };\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// PUT - Полное обновление отзыва\nexport const updateReview = async (id, reviewData) => {\n  try {\n    const response = await apiClient.put(`/comments/${id}`, {\n      name: reviewData.name,\n      body: reviewData.text,\n      email: reviewData.email || 'user@example.com',\n      postId: 1\n    });\n    return {\n      id: response.data.id,\n      name: reviewData.name,\n      text: reviewData.text,\n      rating: reviewData.rating,\n      email: reviewData.email\n    };\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// PATCH - Частичное обновление отзыва\nexport const patchReview = async (id, updates) => {\n  try {\n    const response = await apiClient.patch(`/comments/${id}`, updates);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// DELETE - Удаление отзыва\nexport const deleteReview = async id => {\n  try {\n    const response = await apiClient.delete(`/comments/${id}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport default {\n  getReviews,\n  getReviewById,\n  createReview,\n  updateReview,\n  patchReview,\n  deleteReview\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","handleError","error","response","console","status","data","Error","statusText","request","message","getReviews","get","map","comment","id","name","text","body","rating","Math","floor","random","email","getReviewById","createReview","reviewData","post","postId","updateReview","put","patchReview","updates","patch","deleteReview","delete"],"sources":["C:/Users/Admin/Desktop/Диск D/колледж/Бутов/DR/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\n// Создаем экземпляр axios с базовыми настройками\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Обработчик ошибок\r\nconst handleError = (error) => {\r\n  if (error.response) {\r\n    // Сервер ответил с ошибкой\r\n    console.error('Ошибка сервера:', error.response.status, error.response.data);\r\n    throw new Error(`Ошибка ${error.response.status}: ${error.response.statusText}`);\r\n  } else if (error.request) {\r\n    // Запрос был отправлен, но ответа не получено\r\n    console.error('Ошибка сети: нет ответа от сервера');\r\n    throw new Error('Ошибка сети: проверьте подключение к интернету');\r\n  } else {\r\n    // Ошибка при настройке запроса\r\n    console.error('Ошибка запроса:', error.message);\r\n    throw new Error('Ошибка при отправке запроса');\r\n  }\r\n};\r\n\r\n// GET - Получение всех отзывов\r\nexport const getReviews = async () => {\r\n  try {\r\n    const response = await apiClient.get('/comments?_limit=10');\r\n    // Трансформируем данные JSONPlaceholder в формат наших отзывов\r\n    return response.data.map(comment => ({\r\n      id: comment.id,\r\n      name: comment.name,\r\n      text: comment.body,\r\n      rating: Math.floor(Math.random() * 2) + 4, // Случайная оценка 4 или 5\r\n      email: comment.email\r\n    }));\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// GET - Получение одного отзыва по ID\r\nexport const getReviewById = async (id) => {\r\n  try {\r\n    const response = await apiClient.get(`/comments/${id}`);\r\n    return {\r\n      id: response.data.id,\r\n      name: response.data.name,\r\n      text: response.data.body,\r\n      rating: 5,\r\n      email: response.data.email\r\n    };\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// POST - Добавление нового отзыва\r\nexport const createReview = async (reviewData) => {\r\n  try {\r\n    const response = await apiClient.post('/comments', {\r\n      name: reviewData.name,\r\n      body: reviewData.text,\r\n      email: reviewData.email || 'user@example.com',\r\n      postId: 1\r\n    });\r\n    \r\n    return {\r\n      id: response.data.id,\r\n      name: reviewData.name,\r\n      text: reviewData.text,\r\n      rating: reviewData.rating,\r\n      email: reviewData.email\r\n    };\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// PUT - Полное обновление отзыва\r\nexport const updateReview = async (id, reviewData) => {\r\n  try {\r\n    const response = await apiClient.put(`/comments/${id}`, {\r\n      name: reviewData.name,\r\n      body: reviewData.text,\r\n      email: reviewData.email || 'user@example.com',\r\n      postId: 1\r\n    });\r\n    \r\n    return {\r\n      id: response.data.id,\r\n      name: reviewData.name,\r\n      text: reviewData.text,\r\n      rating: reviewData.rating,\r\n      email: reviewData.email\r\n    };\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// PATCH - Частичное обновление отзыва\r\nexport const patchReview = async (id, updates) => {\r\n  try {\r\n    const response = await apiClient.patch(`/comments/${id}`, updates);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// DELETE - Удаление отзыва\r\nexport const deleteReview = async (id) => {\r\n  try {\r\n    const response = await apiClient.delete(`/comments/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\nexport default {\r\n  getReviews,\r\n  getReviewById,\r\n  createReview,\r\n  updateReview,\r\n  patchReview,\r\n  deleteReview\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
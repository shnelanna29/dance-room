{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { getReviews, createReview, updateReview, deleteReview } from '../services/api';\nexport const useReviews = () => {\n  _s();\n  return useQuery({\n    queryKey: ['reviews'],\n    queryFn: getReviews,\n    staleTime: 5 * 60 * 1000\n  });\n};\n_s(useReviews, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateReview = () => {\n  _s2();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: createReview,\n    onMutate: async newReview => {\n      await queryClient.cancelQueries({\n        queryKey: ['reviews']\n      });\n      const previousReviews = queryClient.getQueryData(['reviews']);\n      const optimisticReview = {\n        id: Date.now(),\n        ...newReview,\n        localId: Date.now()\n      };\n      queryClient.setQueryData(['reviews'], old => old ? [...old, optimisticReview] : [optimisticReview]);\n      return {\n        previousReviews\n      };\n    },\n    onError: (err, newReview, context) => {\n      queryClient.setQueryData(['reviews'], context.previousReviews);\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['reviews']\n      });\n    }\n  });\n};\n_s2(useCreateReview, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateReview = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: ({\n      id,\n      data\n    }) => updateReview(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['reviews']\n      });\n    }\n  });\n};\n_s3(useUpdateReview, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useDeleteReview = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: deleteReview,\n    onMutate: async deletedId => {\n      await queryClient.cancelQueries({\n        queryKey: ['reviews']\n      });\n      const previousReviews = queryClient.getQueryData(['reviews']);\n      queryClient.setQueryData(['reviews'], old => old ? old.filter(review => review.id !== deletedId) : []);\n      return {\n        previousReviews\n      };\n    },\n    onError: (err, deletedId, context) => {\n      queryClient.setQueryData(['reviews'], context.previousReviews);\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['reviews']\n      });\n    }\n  });\n};\n_s4(useDeleteReview, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","getReviews","createReview","updateReview","deleteReview","useReviews","_s","queryKey","queryFn","staleTime","useCreateReview","_s2","queryClient","mutationFn","onMutate","newReview","cancelQueries","previousReviews","getQueryData","optimisticReview","id","Date","now","localId","setQueryData","old","onError","err","context","onSettled","invalidateQueries","useUpdateReview","_s3","data","onSuccess","useDeleteReview","_s4","deletedId","filter","review"],"sources":["C:/Users/Admin/Desktop/Диск D/колледж/Бутов/DR/src/hooks/useReviews.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { getReviews, createReview, updateReview, deleteReview } from '../services/api';\r\n\r\nexport const useReviews = () => {\r\n  return useQuery({\r\n    queryKey: ['reviews'],\r\n    queryFn: getReviews,\r\n    staleTime: 5 * 60 * 1000,\r\n  });\r\n};\r\n\r\nexport const useCreateReview = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createReview,\r\n    onMutate: async (newReview) => {\r\n      await queryClient.cancelQueries({ queryKey: ['reviews'] });\r\n      \r\n      const previousReviews = queryClient.getQueryData(['reviews']);\r\n      \r\n      const optimisticReview = {\r\n        id: Date.now(),\r\n        ...newReview,\r\n        localId: Date.now(),\r\n      };\r\n\r\n      queryClient.setQueryData(['reviews'], (old) => \r\n        old ? [...old, optimisticReview] : [optimisticReview]\r\n      );\r\n\r\n      return { previousReviews };\r\n    },\r\n    onError: (err, newReview, context) => {\r\n      queryClient.setQueryData(['reviews'], context.previousReviews);\r\n    },\r\n    onSettled: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['reviews'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateReview = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: ({ id, data }) => updateReview(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['reviews'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useDeleteReview = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteReview,\r\n    onMutate: async (deletedId) => {\r\n      await queryClient.cancelQueries({ queryKey: ['reviews'] });\r\n      \r\n      const previousReviews = queryClient.getQueryData(['reviews']);\r\n      \r\n      queryClient.setQueryData(['reviews'], (old) => \r\n        old ? old.filter(review => review.id !== deletedId) : []\r\n      );\r\n\r\n      return { previousReviews };\r\n    },\r\n    onError: (err, deletedId, context) => {\r\n      queryClient.setQueryData(['reviews'], context.previousReviews);\r\n    },\r\n    onSettled: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['reviews'] });\r\n    },\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}